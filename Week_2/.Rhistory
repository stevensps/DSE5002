library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
sales <- read.delim("Data/sales_pipe.txt"
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
View(sales)
?colnames
colnames(sales$ï..Row.ID=x,do.NULL = FALSE, prefix="col")
x <- colnames(sales$ï..Row.ID,do.NULL = FALSE, prefix="col")
colnames(x) <- Row.ID
x <- colnames(sales$ï..Row.ID,do.NULL = FALSE, prefix="Row.ID")
colnames(x) <- Row.ID
colnames(x)
x <- colnames(sales$ï..Row.ID,do.NULL = FALSE, prefix="Row.ID")
colnames(x) <- Row.ID
colnames(x) <- "Row.ID"
View(sales)
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
xcolnames(x,do.NULL = FALSE, prefix="Row.ID")
colnames(x,do.NULL = FALSE, prefix="Row.ID")
x <- sales$ï..Row.ID
View(sales)
colnames(x,do.NULL = FALSE, prefix="Row.ID")
View(sales)
colnames(x) <- Row.ID
x <- sales$ï..Row.ID
colnames(x) <- Row.ID
colnames(x) <- "Row.ID"
colnames(sales$ï..Row.ID) <- "Row.ID"
colnames(x) <- c("Row.ID")
View(sales)
colnames(x)[1] <- c("Row.ID")
colnames(x)[1] <- "Row.ID"
colnames(x)[1] <- c("Row.ID",)
colnames(x)[1] <- c("Row.ID")
colnames(sales)[1] <- c("Row.ID")
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
View(sales)
colnames(sales)[1] <- c("Row.ID")
View(sales)
sales$Ship.Date <- as.Date(sales$Ship.Date,
format='%m/%d/%Y'
)
View(sales)
?as.Date
sales$Ship.Date <- as.Date(sales$Ship.Date
,format='%m/%d/%Y')
sales$Ship.Date <- as.Date(sales$Ship.Date
,format="%m/%d/%Y")
library(stringr)
library(lubridate)
library(forcats)
sales$Ship.Date <- as.Date(sales$Ship.Date
,format="%m/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%m/%d/%Y")
library(stringr)
library(lubridate)
library(forcats)
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%m/%d/%Y")
```{r}
library(stringr)
library(lubridate)
library(forcats)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
View(sales)
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%M/%d/%Y")
is.factor(sales$State)
View(sales)
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
years_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "years")
days_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "days")
weeks_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "weeks")
ship_order_diff <- sales$Ship.Date - sales$Order.Date
mean_shipdays <- time_length(mean(ship_order_diff),"days")
Split customer name into two columns
#Split customer name into two columns
split_custname <- str_split_fixed(sales$Customer.Name," ",n=2)
#pull out the length of customer first names
firstname_length <- str_length(split_custname[,1])
#If the first name is equal to 4, then count the total number matched to the
#Pattern Bill. Wrap this entire piece of code in a sum function.
sum(ifelse(firstname_length == 4, str_count(split_custname[,1],"Bill"),0))
sum(str_count(sales$Product.Name,"table"))
sales$State <- factor(sales$State)
is.factor(sales$State)
levels(sales$State)
?table
table
?cat
?table
table(sales$State)
state_table <- table(sales$State)
state_table
state_table
View(sales)
table(sales$State)
barplot(table(sales$State))
?table
levels(sales$State)
barplot(table(sales$Category, sales$State="Texas"))
texas_df <- sales[(sales$State="Texas") ,]
View(texas_df)
texas_df <- sales[(sales$State=='Texas') ,]
View(texas_df)
texas_df <- sales[(sales$State=='Texas')]
texas_df <- sales[(sales$State=='Texas') ,]
?subset
texas_df <- subset(sales, sales$State=='Texas')
texas_df <- subset(sales, sales$State=='Texas')
View(texas_df)
texas_df <- sales[sales$State=='Texas' ,]
barplot(table(sales$Category))
?barplot
barplot(table(sales$Category),subset(sales$State=="Texas"))
barplot(table(sales$Category),subset=(sales$State=="Texas"))
texas_df <- subset(sales$State=="Texas")
texas_df <- subset(sales$State=="Texas")
texas_df <- table(sales$Category,subset(sales$State=="Texas"))
texas_df <- table(sales$Category,subset=(sales$State=="Texas"))
texas_df
texas_df <- sales[table(sales$Category,subset=(sales$State=="Texas")) ,]
View(texas_df)
texas_df <- sales[table(sales$State=="Texas") ,]
View(texas_df)
texas_df2 <- sales[table(sales$State=="Texas") ,]
texas_df3 <- sales[sales$State=="Texas" ,]
texas_df3 <- sales[sales$State=='Texas' ,]
texas_df3 <- sales[(sales$State=='Texas') ,]
texas_df3 <- sales[c(sales$State=='Texas') ,]
View(texas_df3)
texas_df3 <- sales[(sales$State=='Texas')]
texas_df3 <- sales[,(sales$State=='Texas')]
texas_df3 <- sales[, (sales$State=='Texas')]
texas_df3 <- sales[(sales$State=='Texas') ,]
barplot(table(sales$Category),subset(sales,sales$State=="Texas"
,select=sales$Row.ID:sales$Profit)
?barplot
?barplot
barplot
?barplot()
barplot(sales$Category,subset(sales,sales$State=="Texas"
,select=sales$Row.ID:sales$Profit)
barplot(sales$Category,subset(sales,sales$State=="Texas"
newdata <- subset(sales, State=="Texas", select=Row.ID:Profit)
newdata <- subset(sales, sales$State=="Texas", select=Row.ID:Profit)
newdata <- subset(sales, sales$State=="Texas", select=sales$Row.ID:sales$Profit)
newdata <- subset(sales, State=="Texas")
is.data.frame(sales)
sum(str_count(sales$Product.Name,"table"))
table(sales$State)
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
years_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "years")
days_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "days")
weeks_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "weeks")
ship_order_diff <- sales$Ship.Date - sales$Order.Date
mean_shipdays <- time_length(mean(ship_order_diff),"days")
#It was hard for me to incorporate the length() function into this
#This isn't the way I would normally write the code, but to answer the question
#I wrote it this way
#Split customer name into two columns
split_custname <- str_split_fixed(sales$Customer.Name," ",n=2)
#pull out the length of customer first names
firstname_length <- str_length(split_custname[,1])
#If the first name is equal to 4, then count the total number matched to the
#Pattern Bill. Wrap this entire piece of code in a sum function.
sum(ifelse(firstname_length == 4, str_count(split_custname[,1],"Bill"),0))
sum(str_count(sales$Product.Name,"table"))
sales$State <- factor(sales$State)
is.factor(sales$State)
levels(sales$State)
table(sales$State)
#texas_df3 <- sales[(sales$State=='Texas') ,]
newdata <- subset(sales, State=="Texas")
#barplot(sales$Category,subset(sales,sales$State=="Texas"
#                                     ,select=sales$Row.ID:sales$Profit))
View(newdata)
View(sales)
barplot(table(newdata$Category))
sales_texas <- subset(sales, State=="Texas")
barplot(table(sales_texas$Category))
?aggregate
aggregate(sales$Profit, by=sales$Region)
aggregate(sales$Profit, by=sales$Region, Fun = mean)
aggregate(sales$Profit, by=sales$Region, FUN = mean)
sales_list <- list(sales)
sales_list <- list(sales)
aggregate(sales$Profit, by=sales_list$sales$Profit, FUN = mean)
aggregate(sales$Profit, by=sales_list(sales$Profit), FUN = mean)
aggregate(sales$Profit, by=sales_list(Profit), FUN = mean)
sales_list$sales$Profit
aggregate(sales$Profit, by=sales_list$Profit, FUN = mean)
aggregate(sales$Profit, by=sales_list$Profit[21], FUN = mean)
aggregate(sales$Profit, by=sales_list(sales$Profit[21]), FUN = mean)
aggregate(sales$Profit, by=sales_list$Profit[21], FUN = mean)
aggregate(sales$Profit, list(sales$Region), FUN = mean)
?format
View(sales)
?format.Date
format.Date(sales$Order.Date, "%Y")
orderyear <- format.Date(sales$Order.Date, "%Y")
aggregate(sales$Profit, list(orderyear), FUN = mean)
View(sales)
write.xlsx(sales)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(sales)
write.xlsx(sales)
write.xlsx(file=sales)
write.xlsx(sales, "sales.xlsx")
slice(sales, 1:10)
sales[c(1:10)]
sales[c(1:10) ,]
sales[1:10 ,]
print(years_betweenorders)
print(days_betweenorders)
print(weeks_betweenorders)
print(mean_shipdays)
print(count_bill)
split_custname <- str_split_fixed(sales$Customer.Name," ",n=2)
#pull out the length of customer first names
firstname_length <- str_length(split_custname[,1])
#If the first name is equal to 4, then count the total number matched to the
#Pattern Bill. Wrap this entire piece of code in a sum function.
count_bill <- sum(ifelse(firstname_length == 4, str_count(split_custname[,1],"Bill"),0))
print(count_bill)
View(sales_texas)
?subset
sales[1:10 , 1:6]
?time_length
library(stringr)
library(lubridate)
library(forcats)
?time_length
library(stringr)
library(lubridate)
library(forcats)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
library(stringr)
library(lubridate)
library(forcats)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
#Showing slice so my document doesn't span too many pages. See first
#column name change
sales[1:10 , 1:6]
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
years_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "years")
days_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "days")
weeks_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "weeks")
print(years_betweenorders)
print(days_betweenorders)
print(weeks_betweenorders)
library(stringr)
library(lubridate)
library(forcats)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
#Showing slice so my document doesn't span too many pages. See first
#column name change
sales[1:10 , 1:6]
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_order_date <- max(sales$Order.Date)
min_order_date <- min(sales$Order.Date)
years_between_orders <- time_length(difftime(max_orderdate, min_orderdate), "years")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_order_date <- max(sales$Order.Date)
min_order_date <- min(sales$Order.Date)
years_between_orders <- time_length(difftime(max_orderdate, min_orderdate), "years")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_order_date <- max(sales$Order.Date)
min_order_date <- min(sales$Order.Date)
years_between_orders <- time_length(difftime(max_order_date, min_order_date), "years")
days_between_orders <- time_length(difftime(max_order_date, min_order_date), "days")
weeks_between_orders <- time_length(difftime(max_order_date, min_order_date), "weeks")
print(years_between_orders)
print(days_between_orders)
print(weeks_between_orders)
ship_order_diff <- sales$Ship.Date - sales$Order.Date
mean_ship_days <- time_length(mean(ship_order_diff),"days")
print(mean_ship_days)
#It was hard for me to incorporate the length() function into this
#This isn't the way I would normally write the code, but to answer the question
#I wrote it this way
#Split customer name into two columns
split_custname <- str_split_fixed(sales$Customer.Name," ",n=2)
#pull out the length of customer first names
firstname_length <- str_length(split_custname[,1])
#If the first name is equal to 4, then count the total number matched to the
#Pattern Bill. Wrap this entire piece of code in a sum function.
sum(ifelse(firstname_length == 4, str_count(split_custname[,1],"Bill"),0))
sum(str_count(sales$Product.Name,"table"))
sales$State <- factor(sales$State)
is.factor(sales$State)
levels(sales$State)
table(sales$State)
sales$State <- factor(sales$State)
is.factor(sales$State)
levels(sales$State)
table(sales$State)
sales_texas <- subset(sales, State=="Texas")
barplot(table(sales_texas$Category))
aggregate(sales$Profit, list(sales$Region), FUN = mean)
order_year <- format.Date(sales$Order.Date, "%Y")
aggregate(sales$Profit, list(order_year), FUN = mean)
?forcats
?levels
?factor
