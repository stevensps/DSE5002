"2015-03-27")),
stringsAsFactors = FALSE
)
View(emp.data)
# Summarize the data frame.
summary(emp.data)
hist(emp.data$salary)
hist(emp.data$salary,bins=5)
str(emp_data)
emp_data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
str(emp_data)
?read.delim
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
View(sales_excel)
# Read csv files (comma separated value)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
emp.data$emp_name
View(sales_csv)
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
View(temp_char)
View(temp_char)
View(temp_char)
temp_char <- stringr::str_split_fixed(string=sales_csv$Order.ID,pattern='-',n=3)
paste(temp_char[,1], temp_char[,2],sep='-')
sales_csv$OrderNo <- temp_char[,3]
View(sales_csv)
View(temp_char)
# Splitting strings to create two new columns
## String split fixed will split the product id column into three columns in a matrix by the '-'
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
# To recreate our Product ID we just paste the individual vectors together with the '-' seperator
sales_csv$Product <- paste(temp_char[,1], temp_char[,2],sep='-')
# Our product number is now just the third column of the matrix
sales_csv$Product.Number <- temp_char[,3]
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
# Check whether Region is a factor & find the unique values.
is.factor(sales_csv$Region)
unique(sales_csv$Region)
factor(sales$Region)
factor(sales_csv$Region)
unique(sales_csv$Region)
sales_csv$Region <- factor(sales_csv$Region)
is.factor(sales_csv$Region)
levels(sales_csv$Region)
# Create a basic barplot
barplot(table(sales_csv$Region))
# What if we wanted to change the order of the categories in the barplot?
# Use factors and reorder the levels
sales_csv$Region <- factor(sales_csv$Region
,levels=c('West','East','Central','South')
)
levels(sales_csv$Region)
barplot(table(sales_csv$Region))
# Get the structure of the date column
str(sales_csv$Order.Date)
inherits(sales_csv$Order.Date
, c("Date")
)
?as.Date
# Using the table in our notes, convert the character to a date obeject.
sales_csv$Order.Date <- as.Date(sales_csv$Order.Date
,format='%m/%d/%Y'
)
# Check to see if our conversion worked
inherits(sales_csv$Order.Date
, c("Date")
)
str(sales_csv$Order.Date)
sales_csv[1:10,5]
(sales_csv$Ship.Mode=='First Class')
|(sales_csv$City=='Henderson')
(sales_csv$City=='Henderson')
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')|(sales_csv$City=='Henderson') ,]
View(first_class_df)
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')&(sales_csv$City=='Henderson') ,]
View(first_class_df)
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
list_data[[1]]
list_data[[3]]
list_data[[6]]$City[1]
?list
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list('obj1'="Male", 'obj2'="Female", 'obj3'=c(35,42,5),
'obj4'=read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
list_data['obj4']
list_data['obj2']
list_data$obj1
list_data$obj3[1]
list_data$obj4$Customer.ID[5]
data <- list_data$obj4
View(data)
?sort
test <- data[order(data$State),]
View(test)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
?aggregate
table(sale$table)
table(sales$table)
?table
table(factor(sales$table))
t <- table(factor(sales$table))
t
View(sales)
?str_split_fixed
library(tidyr)
library(ggplot2)
library(dplyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year')) %>%
separate(sep=-2, into=c('min_age','max_age'),col=age) %>%
mutate(min_age = ifelse(max_age=='65','65',min_age),
max_age = ifelse(max_age=='65','Inf',max_age)
) %>%
unite("age_range",min_age:max_age,sep='-')
?pivot_longer
View(who)
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
agg1 <- who2 %>%
group_by(diagnosis,gender) %>%
summarize(count = sum(count,na.rm=T))
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
View(who2)
agg2 <- who2 %>%
group_by(year,gender,diagnosis) %>%
summarize(percent_pop = sum(count,na.rm=T)/mean(population,na.rm=T))%>%
drop_na()
ggplot(agg2,aes(x=year,y=percent_pop,color=gender)) +
geom_line() +
facet_grid(diagnosis~.)
agg3 <- who2 %>%
group_by(diagnosis) %>%
summarize(total_count = sum(count,na.rm=T))
agg4 <- who2 %>%
group_by(age_range,diagnosis) %>%
summarize(age_count = sum(count,na.rm=T)) %>%
left_join(agg3,by='diagnosis') %>%
mutate(percent_of_total = age_count/total_count)
ggplot(agg4,aes(x=diagnosis,y=percent_of_total))+
geom_col() +
facet_grid(.~age_range)
ggplot(agg4,aes(x=diagnosis,y=percent_of_total,fill=diagnosis))+
geom_col() +
facet_grid(.~age_range)
agg1 <- who2 %>%
group_by(diagnosis,gender) %>%
summarize(count = sum(count,na.rm=T))
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
View(agg1)
?summerize
# Your code here
sales <- read.delim("DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
# Your code here
sales <- read.delim("/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
x <- 10
y <- 5
z <- 20
y<x<z
x
y
z
y<x<z
y < x < z
y < x < z
y < x < z
print(y < x < z)
x <- 10
y <- 5
z <- 20
print(y < x < z)
print(y < x)
print(y < x < z)
print(y < x & x < z)
print(x + y = z)
print(x + y == z)
print(x + 2y == z)
print(x + 2*y == z)
test_vector <- c(1,5,11:22)
print(x in test_vector)
print(x %in% test_vector)
print(x,y,z %in% test_vector)
print(x or y or z %in% test_vector)
print(x | y | z %in% test_vector)
x == test_vector
y == test_vector
x | y | z == test_vector
x & y & z == test_vector
'x' | 'y' | 'z' == test_vector
x | y | z == test_vector
which(x | y | z == test_vector)
which(x | y | z %in% test_vector)
print(which(x | y | z) == test_vector)
print(which(x | y | z) %in% test_vector)
print(which(x==test_vector | y==test_vector | z==test_vector)
print(which(x==test_vector | y==test_vector | z==test_vector))
which(x==test_vector | y==test_vector | z==test_vector)
test_vector
print(x | y | z %in% test_vector)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
View(sales)
colnames(sales)[1] <- c("Row.ID")
View(sales)
View(sales)
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
```
colnames(sales)[1] <- c("Row.ID")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
?int_diff
max_shipdate <- max(sales$Ship.Date)
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
difftime(days(max_orderdate, min_orderdate))
difftime(max_orderdate, min_orderdate,days)
difftime(max_orderdate, min_orderdate,years)
difftime(max_orderdate, min_orderdate,years)
difftime(max_orderdate, min_orderdate,units=days)
difftime(max_orderdate, min_orderdate,days)
difftime(max_orderdate, min_orderdate,years)
difftime(max_orderdate, min_orderdate,units="days")
difftime(max_orderdate, min_orderdate,units="years")
difftime(max_orderdate, min_orderdate,units="weeks")
ddays(max_orderdate, min_orderdate)
duration(difftime(max_orderdate, min_orderdate)"days")
duration(difftime(max_orderdate, min_orderdate),"days")
?duration
duration(num=difftime(max_orderdate, min_orderdate),units="days")
difftime(max_orderdate, min_orderdate)
time_between_minmaxorders <- difftime(max_orderdate, min_orderdate)
time_between_minmaxorders <- difftime(max_orderdate, min_orderdate)
time_between <- difftime(max_orderdate, min_orderdate)
difftime(max_orderdate, min_orderdate)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
time_between <- difftime(max(sales$Order.Date), min(sales$Order.Date))
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
time_between <- max_orderdate - min_orderdate
time_length(difftime(max_orderdate, min_orderdate), "years")
years_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "years")
days_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "days")
weeks_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "weeks")
time_length(mean(sales$Ship.Date),"days")
time_length(mean(sales$Ship.Date),"days")
ddays(mean(sales$Ship.Date))
duration(mean(sales$Ship.Date),unit="days")
mean(sales$Ship.Date)
mean_shipdate <- mean(sales$Ship.Date)
ddays(mean_shipdate)
?as.duration
mean_shipdate <- as.numeric(mean(sales$Ship.Date),"days")
sales$Ship.Date - sales$Order.Date
ship_order_diff <- sales$Ship.Date - sales$Order.Date
?paste
sales$daystoship <- paste(ship_order_diff[5])
View(sales)
sales$daystoship <- paste(ship_order_diff[,5])
sales$daystoship <- paste(ship_order_diff[5,])
View(sales)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
years_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "years")
days_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "days")
weeks_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "weeks")
ship_order_diff <- sales$Ship.Date - sales$Order.Date
sales$daystoship <- paste(ship_order_diff[,5])
View(sales)
sales$daystoship[5] <- paste(ship_order_diff)
sales$daystoship <- paste(ship_order_diff[,5])
sales$daystoship <- paste(ship_order_diff[,5])
sales$daystoship <- paste(ship_order_diff[ ,5])
sales$daystoship <- paste(ship_order_diff[5])
View(sales)
?stringr
?paste
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
colnames(sales)[1] <- c("Row.ID")
sales$Order.Date <- as.Date(sales$Order.Date,format="%M/%d/%Y")
sales$Ship.Date <- as.Date(sales$Ship.Date,format="%B %d %Y")
max_orderdate <- max(sales$Order.Date)
min_orderdate <- min(sales$Order.Date)
years_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "years")
days_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "days")
weeks_betweenorders <- time_length(difftime(max_orderdate, min_orderdate), "weeks")
ship_order_diff <- sales$Ship.Date - sales$Order.Date
mean_shipdays <- mean(ship_order_diff)
mean_shipdays <- time_length(mean(ship_order_diff),"days")
?length
length("Bill")
lenth(sales$Customer.Name)
length(sales$Customer.Name)
subset(sales$Customer.Name,"Bill")
str_count(sales$Customer.Name,"Bill")
sum(str_count(sales$Customer.Name,"Bill"))
sum(str_count(sales$Product.Name,"table"))
str_length(Bill)
str_length("Bill")
str_split_fixed(sales$Customer.Name," ",n=2)
split_custname <- str_split_fixed(sales$Customer.Name," ",n=2)
View(sales)
str_length(split_custname[1,]="Bill")
str_length(split_custname[1,])
str_length("Bill")
str_length("Bill")=split_custname[,1]
if(str_length("Bill")=str(split_custname[,1]))
if(str_length("Bill")=str_length(split_custname[,1]))
if(str_length("Bill"))
return(str_count(split_custname,"Bill"))
if(length(split_custnam)=4)
if(length(split_custnam)=4)
if(length(split_custnam[,1])=4)
length(split_custname[,1])
str_length(split_custname[,1])
length <- str_length(split_custname[,1])
firstname_length <- str_length(split_custname[,1])
if(firstname_length=4)
{
if(firstname_length=4)
if(firstname_length = 4)
if(firstname_length = "4")
if(firstname_length == 4)
return(str_count(split_custname[,1],"Bill"))
if(firstname_length > 3)
return(str_count(split_custname[,1],"Bill"))
if(firstname_length > 3)
return(str_count(split_custname[,1],"Bill")
else(0))
?ifelse
ifelse(firstname_length > 3, str_count(split_custname[,1],0))
ifelse(firstname_length > 3, str_count(split_custname[,1],"Bill"),0)
sum(ifelse(firstname_length > 3, str_count(split_custname[,1],"Bill"),0))
sum(ifelse(firstname_length == 4, str_count(split_custname[,1],"Bill"),0))
library(purrr)
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum <- function(nums_vector,target){
loop_vector <- numeric()
loop_work <- 0
#nested for statements using
#seq_along to iterate over the num_vector.
for(i in seq_along(nums_vector)) {
for(j in seq_along(nums_vector)) {
#if the sum of position [i] and position [j] equal the target
#and aren't the same number,
#concatenate and output the indices on a line
#Separate each pair of indices by a new line
loop_work <- loop_work + 1
loop_vector <- if(i < j && nums_vector[i] + nums_vector[j] == target) {
c(paste(loop_vector,cat(i, j, "\n")))
}
}
}
}
#run the function
two_sum(nums_vector, target)
print(loop_work)
loop_vector <- numeric()
loop_work <- 0
print(loop_work)
two_sum <- function(nums_vector,target){
loop_vector <- numeric()
loop_work <- 0
#nested for statements using
#seq_along to iterate over the num_vector.
for(i in seq_along(nums_vector)) {
for(j in seq_along(nums_vector)) {
#if the sum of position [i] and position [j] equal the target
#and aren't the same number,
#concatenate and output the indices on a line
#Separate each pair of indices by a new line
loop_work <- loop_work + 1
loop_vector <- if(i < j && nums_vector[i] + nums_vector[j] == target) {
c(paste(loop_vector,cat(i, j, "\n")))
}
}
}
}
#run the function
two_sum(nums_vector, target)
print(loop_work)
library(purrr)
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
loop_vector <- numeric()
loop_work <- 0
two_sum <- function(nums_vector,target){
#nested for statements using
#seq_along to iterate over the num_vector.
for(i in seq_along(nums_vector)) {
for(j in seq_along(nums_vector)) {
#if the sum of position [i] and position [j] equal the target
#and aren't the same number,
#concatenate and output the indices on a line
#Separate each pair of indices by a new line
loop_work <- loop_work + 1
loop_vector <- if(i < j && nums_vector[i] + nums_vector[j] == target) {
c(paste(loop_vector,cat(i, j, "\n")))
}
}
}
}
#run the function
two_sum(nums_vector, target)
print(loop_work)
#if the sum of position [i] and position [j] equal the target
#and aren't the same number,
#concatenate and output the indices on a line
#Separate each pair of indices by a new line
loop_work <- loop_work + 1
