nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
dafsdfadsfgtretgwaer
hash_work <-0
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
```{r}
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
key <- target2 - nums_vector2[i]
h[as.character(key)] <- i
}
for(j in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[j]
if(complement != nums_vector2[j] && complement %in% names(h)) {
first <- h[[as.character(complement)]]
second <- i
indexes <- c(first, second)
#result2 <- c(result2, paste(h[[as.character(complement)]], nums_vector2[j]))
}
}
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
key <- target2 - nums_vector2[i]
h[as.character(key)] <- i
}
result2 <- character()
for(j in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[j]
if(complement != nums_vector2[j] && complement %in% names(h)) {
first <- h[[as.character(complement)]]
second <- i
indexes <- c(first, second)
#result2 <- c(result2, paste(h[[as.character(complement)]], nums_vector2[j]))
}
}
return(indexes)
}
two_sum2
results <- two_sum2(nums_vector2,target2)
print(results)
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
key <- target2 - nums_vector2[i]
h[as.character(key)] <- i
}
for(j in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[j]
if(complement != nums_vector2[j] && complement %in% names(h)) {
first <- h$data.frame()$Keys[h$data.frame()][, "Values"] == nums_vector2[j]
#result2 <- c(result2, paste(h[[as.character(complement)]], nums_vector2[j]))
second <- i
indexes <- c(first, second)
}
}
return(indexes)
}
result2 <- two_sum2(nums_vector2, target2)
library(hash)
# Define the two_sum2 function
two_sum2 <- function(nums_vector2, target2) {
# Create an empty hash table
h <- hash()
# Populate the hash table with keys as complements (nums_vector2[i] - target2)
# and values as indices
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
h[[as.character(complement)]] <- i
}
# Find the indices of elements whose complements exist in the hash table
complement_indices <- numeric()
original_indices <- numeric()
for (j in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[j]
if (complement != nums_vector2[j] && as.character(complement) %in% names(h)) {
# Store both indices separately
complement_indices <- c(complement_indices, h[[as.character(complement)]])
original_indices <- c(original_indices, j)
}
}
# Combine the indices
result2 <- data.frame(ComplementIndex = complement_indices, OriginalIndex = original_indices)
return(result2)
}
# Example usage
nums_vector2 <- c(5, 7, 12, 34, 6, 10, 8, 9)
target2 <- 15
result2 <- two_sum2(nums_vector2, target2)
print(result2)
hash_table <- hash()
# Populate the hash table with keys as the difference between each number and the target
for (i in seq_along(nums_vector)) {
complement <- target - nums_vector[i]
if (!is.null(hash_table[[as.character(complement)]])) {
# If the complement already exists in the hash table, print the indices
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
# Add the current number's index to the hash table
hash_table[[as.character(nums_vector[i])]] <- i
}
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_table <- hash()
# Populate the hash table with keys as the difference between each number and the target
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(hash_table[[as.character(complement)]])) {
# If the complement already exists in the hash table, print the indices
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
# Add the current number's index to the hash table
hash_table[[as.character(nums_vector2[i])]] <- i
}
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
key <- target2 - nums_vector2[i]
h[as.character(key)] <- i
}
result2 <- character()
for(j in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[j]
if(complement != nums_vector2[j] && complement %in% names(h)) {
result2 <- cat("Indices:", h[[as.character(complement)]], i, "\n")
}
}
return(result2)
}
result2 <- two_sum2(nums_vector2, target2)
print(result2)
print(hash_work)
library(hash)
two_sum2() <- function(nums_vector2, target2) {
# Create an empty hash table (list) to store indices
h <- hash()
# First iteration: Populate the hash table with keys as the numbers and values as indices
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
# Second iteration: Check if each element's complement exists in the hash table
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
}
}
}
library(hash)
two_sum2() <- function(nums_vector2, target2) {
# Create an empty hash table (list) to store indices
h <- hash()
# First iteration: Populate the hash table with keys as the numbers and values as indices
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
# Second iteration: Check if each element's complement exists in the hash table
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
}
}
}
library(hash)
two_sum2() <- function(nums_vector2, target2) {
# Create an empty hash table (list) to store indices
h <- hash()
# First iteration: Populate the hash table with keys as the numbers and values as indices
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
# Second iteration: Check if each element's complement exists in the hash table
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
}
}
}
library(hash)
two_sum2() <- function(nums_vector2,target2) {
# Create an empty hash table (list) to store indices
h <- hash()
# First iteration: Populate the hash table with keys as the numbers and values as indices
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
# Second iteration: Check if each element's complement exists in the hash table
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
}
}
}
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
library(hash)
two_sum2() <- function(nums_vector2,target2) {
# Create an empty hash table (list) to store indices
h <- hash()
# First iteration: Populate the hash table with keys as the numbers and values as indices
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
# Second iteration: Check if each element's complement exists in the hash table
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
}
}
}
# Create an empty hash table (list) to store indices
h <- hash()
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
h
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", hash_table[[as.character(complement)]], i, "\n")
}
}
}
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", h[[as.character(complement)]], i, "\n")
}
}
}
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
library(hash)
two_sum2() <- function(nums_vector2,target2) {
# Create an empty hash table (list) to store indices
h <- hash()
# First iteration: Populate the hash table with keys as the numbers and values as indices
for (i in seq_along(nums_vector2)) {
h[[as.character(nums_vector2[i])]] <- i
}
# Second iteration: Check if each element's complement exists in the hash table
for (i in seq_along(nums_vector2)) {
complement <- target2 - nums_vector2[i]
if (!is.null(h[[as.character(complement)]])) {
# If the complement exists and is not the same element, return indices
if (h[[as.character(complement)]] != i) {
cat("Indices:", h[[as.character(complement)]], i, "\n")
}
}
}
}
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
h[as.character(key)] <- i
}
result2 <- character()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[i]
if(complement != nums_vector2[i] && complement %in% names(h)) {
result2 <- c(result2, paste(cat("Indices:", h[[as.character(complement)]], i, "\n")))
}
}
return(result2)
}
result2 <- two_sum2(nums_vector2, target2)
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
h[as.character(key)] <- i
}
result2 <- character()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[i]
if(complement != nums_vector2[i] && complement %in% names(h)) {
result2 <- c(result2, paste(h[[as.character(complement)]], i))
}
}
return(result2)
}
result2 <- two_sum2(nums_vector2, target2)
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
h[(nums_vector2[i])]] <- i
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
h[(nums_vector2[i])] <- i
}
result2 <- character()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[i]
if(complement != nums_vector2[i] && complement %in% names(h)) {
result2 <- c(result2, paste(h[[as.character(complement)]], i))
}
}
return(result2)
}
result2 <- two_sum2(nums_vector2, target2)
print(result2)
print(hash_work)
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
two_sum2 <- function(nums_vector2,target2){
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
h[(nums_vector2[i])] <- i
}
result2 <- character()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[i]
if(complement < nums_vector2[i] && complement %in% names(h)) {
result2 <- c(result2, paste(h[[as.character(complement)]], i))
}
}
return(result2)
}
result2 <- two_sum2(nums_vector2, target2)
print(result2)
print(hash_work)
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
hash_work <-0
h<-hash()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
h[(nums_vector2[i])] <- i
}
h
result2 <- character()
for(i in seq_along(nums_vector2)) {
hash_work <<- hash_work + 1
complement <- target2 - nums_vector2[i]
if(complement < nums_vector2[i] && complement %in% names(h)) {
result2 <- c(result2, paste(h[[as.character(complement)]], i))
}
}
```{r}
library(purrr)
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
loop_work <- 0
two_sum <- function(nums_vector,target){
loop_vector <- character()
#nested for statements using
#seq_along to iterate over the num_vector.
for(i in seq_along(nums_vector)) {
loop_work <<- loop_work + 1
for(j in seq_along(nums_vector)) {
#if the sum of position [i] and position [j] equal the target
#and aren't the same number,
#concatenate and output the indices on a line
#Separate each pair of indices by a new line
loop_work <<- loop_work + 1
if(i < j && nums_vector[i] + nums_vector[j] == target) {
loop_vector <- c(loop_vector, paste(i, j))
}
}
}
return(loop_vector)
}
#run the function
result <- two_sum(nums_vector, target)
print(result)
#
library(hash)
nums_vector2 <- c(5,7,12,34,6,10,8,9)
target2 <- 15
#Assign hash_work variable to 0
hash_work <- 0
two_sum2 <- function(nums_vector2,target2){
#Assign h to an empty hash map
h<-hash()
#As noted above, assign each element's value as a key and its index as a value to   the hash table.
for(i in seq_along(nums_vector2)) {
#Add 1 to hash_work for comparison to loop work at end. Use <<- global assignment operator to update the variable outside of the function
hash_work <<- hash_work + 1
h[(nums_vector2[i])] <- i
}
#Empty character vector for iteration #2
result2 <- character()
for(i in seq_along(nums_vector2)) {
#Add again to hash_work
hash_work <<- hash_work + 1
#As noted above, complement is equal to target less the nums_vector[i]
complement <- target2 - nums_vector2[i]
#The first part of the if statement checks to make sure the complement is less than nums_vector2[i] to avoid duplication.
#The second part of the if statement checks to see if the complement is contained within the keys (names) of nums_vector2[i]
if(complement < nums_vector2[i] && complement %in% names(h)) {
#If found, append to result2 vector with the value (indices) of the complement, and the index of the original nums_vector2 that corresponds with the value whos sum is equal to the target, 15.
result2 <- c(result2, paste(h[[as.character(complement)]], i))
}
}
#I made sure to use return OUTSIDE of the for loops, but still within function!
return(result2)
}
#Assign result two to running the function
result2 <- two_sum2(nums_vector2, target2)
#Print the result2
print(result2)
#comparison of hashwork vs loopwork. Much more efficient to use hash!
print(hash_work)
print(loop_work)
library(purrr)
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
#Assign initial loop_work variable to 0 for comparison to hashloop later
loop_work <- 0
two_sum <- function(nums_vector,target){
#Empty character vector assigned to variable loop vector for now
loop_vector <- character()
#nested for statements using
#seq_along to iterate over the num_vector.
for(i in seq_along(nums_vector)) {
loop_work <<- loop_work + 1
for(j in seq_along(nums_vector)) {
#if the sum of position [i] and position [j] equal the target
#and aren't the same number,
#concatenate and output the indices on a line
loop_work <<- loop_work + 1
if(i < j && nums_vector[i] + nums_vector[j] == target) {
loop_vector <- c(loop_vector, paste(i, j))
}
}
}
#Return used outside of the for loop, but within function!
return(loop_vector)
}
#run the function by assigning result to the function
result <- two_sum(nums_vector, target)
#print the result
print(result)
